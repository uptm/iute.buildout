# Buildout Configuration File for Development Environment
[buildout]
extends = 
#    buildout.cfg
    00-site-basics-00-varibles.cfg
#    02-administration-03-Security.cfg

parts +=
    pre-packages
    packages-omelette
    zopepy
    zodatabase
#    test

# This recipe helps to install ARFilePreview pre-requeriments
# For options see http://pypi.python.org/pypi/plone.recipe.command
[pre-packages]
recipe = plone.recipe.command
command = 
    aptitude install -y rsync

[packages-omelette]
# Creates a unified directory structure of all namespace packages, 
# symlinking to the actual contents, in order to ease navigation.
# For options see http://pypi.python.org/pypi/collective.recipe.omelette
recipe = collective.recipe.omelette
eggs = ${instance:eggs}
products = ${instance:products}
packages = ${zope2:location}/lib/python ./

# PTProfiler is a small profiling system for page templates in Zope 2. 
# It times each TAL expression and lists the results in a table ranked by processing time.
# For options see http://pypi.python.org/pypi/Products.PTProfiler
[ptprofiler]
recipe = plone.recipe.bundlecheckout
url = https://svn.infrae.com/PTProfiler/trunk
subfolder = PTProfiler

# ZopeProfiler provides profiling support for Zope.
# It can derive both high and low level timing statistics. 
# High level means Zope object call level, while low level is the Python function call level.
# For options see http://pypi.python.org/pypi/Products.ZopeProfiler
[zopeprofiler]
recipe = plone.recipe.distros
urls = http://www.dieter.handshake.de/pyprojects/zope/ZopeProfiler.tgz

# Using ZPTDebuger you can easily see the values of each Python
# expression used in template and all other templates used by it.
# You can see the expression, its value, value type and time used to execute it.
# For options see http://svn.plone.org/svn/collective/ZPTDebugger/trunk/help/ZPTDebugger.stx
[zptdebugger]
recipe = plone.recipe.bundlecheckout
url = https://svn.plone.org/svn/collective/ZPTDebugger/trunk
subfolder = ZPTDebugger

# This product adds a hook so that a deadlocked Zope process can be
# debugged, by dumping a traceback of all running python processes. The
# dump is sent to the event log (at the DEBUG level) and returned to the
# browser (even though the Zope is deadlocked and doesn't answer any other requests!).
# For options see http://svn.nuxeo.org/pub/Zope2/DeadlockDebugger/trunk/README.txt
[deadlockdebugger]
recipe = plone.recipe.bundlecheckout
url = http://svn.nuxeo.org/pub/Zope2/DeadlockDebugger/trunk
subfolder = DeadlockDebugger

[instance]
eggs +=
    Products.PDBDebugMode
    Products.Clouseau
    Products.DocFinderTab
    Products.Gloworm
    zodbbrowser == 0.7.2
zcml +=
    zodbbrowser
http-address = 127.0.0.1:8080
verbose-security = on
debug-mode = on
zope-conf-additional =
    zserver-threads 1

[ipzope]
# a IPython Shell for interactive use with zope running.
# you also need to put
# https://svn.plone.org/svn/collective/dotipython/trunk/ipy_profile_zope.py
# to your $HOME/.ipython directory for the following to work.
# For options see http://plone.org/documentation/kb/setup-ipython-for-zope
recipe = zc.recipe.egg
eggs =
        ipython
        ${instance:eggs}
initialization =
        import sys, os
        os.environ["SOFTWARE_HOME"] = "${zope2:location}/lib/python"
        os.environ["INSTANCE_HOME"] = "${instance:location}"
        sys.argv[1:1] = "-p zope".split()
extra-paths = ${zope2:location}/lib/python
scripts = ipython=ipzope

[zopepy]
recipe = zc.recipe.egg
eggs = ${instance:eggs}
interpreter = zopepy
extra-paths = ${zope2:location}/lib/python
scripts = zopepy

# Buildout recipe to copy data from one place to another via rsync.
# For options see http://pypi.python.org/pypi/collective.recipe.rsync
[zodatabase]
recipe = collective.recipe.rsync
# The source argument to pass to rsync, e.g. user@somehost.com:/srv/client/var/filestorage/Data.fs
source = ${hosts:user}@${hosts:dns}:${buildout:directory}/var/filestorage/iute/Data.fs
# The destination argument to pass to rsync, e.g. ${buildout:directory}/var/filestorage/Data.fs
target = ${buildout:directory}/var/filestorage/iute/Data.fs

# roadrunner is a looping testrunner with environment preloading for test-driven
# development. It makes integration testing with Plone much faster.
# For options see http://pypi.python.org/pypi/roadrunner
[roadrunner]
recipe = roadrunner:plone
zope2-instance = instance
packages-under-test =
# for instance my.*


# This recipe for creating test runners
# Plone/zinstance$ ./bin/instance test -s Products.X 
# OR
# http://plone.org/documentation/manual/upgrade-guide/version/upgrading-plone-3-x-to-4.0/updating-add-on-products-for-plone-4.0/no-longer-bin-instance-test-use-zc.recipe.testrunner
# Plone/zinstance$ ./bin/test -s your.packagename
# For options see http://pypi.python.org/pypi/zc.recipe.testrunner
#[test]
#recipe = zc.recipe.testrunner
#defaults = ['--auto-color', '--auto-progress']
#eggs = 
#    ${instance:eggs}

