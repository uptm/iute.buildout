# Buildout Configuration File for monitoring products
[buildout]

extends = 02-administration-01-caching.cfg


# Add additional egg download sources here. dist.plone.org contains archives
# of Plone packages.
find-links +=
    http://www.majid.info/python/threadframe/threadframe-0.2.tar.gz


parts += 
    instance
    install-munin
    install-monit
#    setup-monit
    using-munin
#    munin-async
#    munin-varnish

# Use this section to install and configure a Zope operating
# instance.
# For options see http://pypi.python.org/pypi/plone.recipe.zope2instance
[instance]
eggs +=

# This product dumps stack traces of long running requests of 
# a Zope2 instance to a log file. If a request takes more than 
# a configured timeout, it's stack trace will be dumped periodically to a log file.
    Products.LongRequestLogger == 1.0

# This package provides munin plugins for monitoring various aspects of a Zope instance.
#
# Currently there are 4 plugins available:
#
#  * "zopethreads" - reports free Zope threads
#  * "zopecache" - reports database cache parameters
#  * "zodbactivity" - reports ZODB activity
#  * "zopememory" - reports Zope memory usage (only works on Linux)
    munin.zope == 1.1

# This package provides base classes for defining Munin graphs 
# and a main function to handle munin-typical symlinked scripts.
    gocept.munin == 0.1

# This package provides munin plugins for monitoring various aspects of a Plone instance.
#
# Currently there is 1 plugins available:
#
# "contentcreation" - reports content creation and modification taken from portal_catalog
#    munin.plone == 1.2

# Munin plugins for zc.async. This package provides munin plugins for monitoring zc.async queues.
#    munin.async == 0.2

#    redturtle.munin == 0.1

# A buildout recipe that packages and configures the munin tool varnish_ to enable monitoring of Varnish.
#    munin.varnish == 1.0a3

zcml += 
    munin.zope
#    gocept.munin
#    munin.async
#    redturtle.munin

# Give additional lines to zope.conf. Make sure you indent any lines after the one with the parameter.
zope-conf-additional +=

    %define INSTANCE ${buildout:directory}/


# This recipe helps to install munin pre-requeriments
# For options see http://pypi.python.org/pypi/plone.recipe.command
[install-munin]
recipe = plone.recipe.command

# Command to run when the buildout part is installed.
command = 
    aptitude install -y munin munin-node munin-plugins-extra

# Command to run when the buildout part is updated. This happens when buildout 
# is run but the configuration for this buildout part has not changed.
update-command = ${install-munin:command} 

# When yes, on or true, buildout will stop if the command ends with a non zero exit code.
stop-on-error = yes


# This recipe helps to install monit pre-requeriments
# For options see http://pypi.python.org/pypi/plone.recipe.command
[install-monit]
recipe = plone.recipe.command

# Command to run when the buildout part is installed.
command = 
    aptitude install -y monit

# Command to run when the buildout part is updated. This happens when buildout 
# is run but the configuration for this buildout part has not changed.
update-command = ${install-monit:command} 

# When yes, on or true, buildout will stop if the command ends with a non zero exit code.
stop-on-error = yes


# This recipe helps to initializes a monit configuration file
# For options see http://pypi.python.org/pypi/collective.recipe.template
#[setup-monit]
#recipe = collective.recipe.template

# a input template file should be created on based 
#input = 
#    ${buildout:directory}/templates/monit.tmpl
#    ${buildout:directory}/templates/monitrc.tmpl

# a output file should be created on based a template input
#output = 
#    ${buildout:directory}/etc/monit
#    ${buildout:directory}/etc/monitrc


# This recipe for installing Python package distributions as eggs
# For options see http://pypi.python.org/pypi/zc.recipe.egg
[using-munin]
recipe = zc.recipe.egg

# A list of eggs to install given as one or more setuptools requirement strings. 
# Each string must be given on a separate line.
eggs = munin.zope

# Specify some arguments to be passed to entry points as Python source.
arguments = http_address='${hosts:http-address}', user='${zopeserver:effective-user}'


# This recipe helps to install munin.async
# For options see http://pypi.python.org/pypi/zc.recipe.egg
#[munin-async]
#recipe = zc.recipe.egg
#eggs = munin.async
#arguments = http_address='${worker:http-address}', user='${worker:user}'


# This recipe that packages and configures the munin tool varnish_ to enable monitoring of Varnish.
# For options see http://pypi.python.org/pypi/munin-varnish
#[munin-varnish]
#recipe = munin-varnish
#varnishstat = ${varnish-build:location}/bin/varnishstat


